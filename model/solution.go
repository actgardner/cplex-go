package model

/*
#define _LP64
#include <ilcplex/cplex.h>

*/
import "C"

/* Possible optimization results */
type SolutionStatus C.int

const (
	CPX_STAT_OPTIMAL                      SolutionStatus = C.CPX_STAT_OPTIMAL
	CPX_STAT_UNBOUNDED                    SolutionStatus = C.CPX_STAT_UNBOUNDED
	CPX_STAT_INFEASIBLE                   SolutionStatus = C.CPX_STAT_INFEASIBLE
	CPX_STAT_INForUNBD                    SolutionStatus = C.CPX_STAT_INForUNBD
	CPX_STAT_OPTIMAL_INFEAS               SolutionStatus = C.CPX_STAT_OPTIMAL_INFEAS
	CPX_STAT_NUM_BEST                     SolutionStatus = C.CPX_STAT_NUM_BEST
	CPX_STAT_ABORT_IT_LIM                 SolutionStatus = C.CPX_STAT_ABORT_IT_LIM
	CPX_STAT_ABORT_TIME_LIM               SolutionStatus = C.CPX_STAT_ABORT_TIME_LIM
	CPX_STAT_ABORT_OBJ_LIM                SolutionStatus = C.CPX_STAT_ABORT_OBJ_LIM
	CPX_STAT_ABORT_USER                   SolutionStatus = C.CPX_STAT_ABORT_USER
	CPX_STAT_FEASIBLE_RELAXED_SUM         SolutionStatus = C.CPX_STAT_FEASIBLE_RELAXED_SUM
	CPX_STAT_OPTIMAL_RELAXED_SUM          SolutionStatus = C.CPX_STAT_OPTIMAL_RELAXED_SUM
	CPX_STAT_FEASIBLE_RELAXED_INF         SolutionStatus = C.CPX_STAT_FEASIBLE_RELAXED_INF
	CPX_STAT_OPTIMAL_RELAXED_INF          SolutionStatus = C.CPX_STAT_OPTIMAL_RELAXED_INF
	CPX_STAT_FEASIBLE_RELAXED_QUAD        SolutionStatus = C.CPX_STAT_FEASIBLE_RELAXED_QUAD
	CPX_STAT_OPTIMAL_RELAXED_QUAD         SolutionStatus = C.CPX_STAT_OPTIMAL_RELAXED_QUAD
	CPX_STAT_OPTIMAL_FACE_UNBOUNDED       SolutionStatus = C.CPX_STAT_OPTIMAL_FACE_UNBOUNDED
	CPX_STAT_ABORT_PRIM_OBJ_LIM           SolutionStatus = C.CPX_STAT_ABORT_PRIM_OBJ_LIM
	CPX_STAT_ABORT_DUAL_OBJ_LIM           SolutionStatus = C.CPX_STAT_ABORT_DUAL_OBJ_LIM
	CPX_STAT_FEASIBLE                     SolutionStatus = C.CPX_STAT_FEASIBLE
	CPX_STAT_FIRSTORDER                   SolutionStatus = C.CPX_STAT_FIRSTORDER
	CPX_STAT_ABORT_DETTIME_LIM            SolutionStatus = C.CPX_STAT_ABORT_DETTIME_LIM
	CPX_STAT_CONFLICT_FEASIBLE            SolutionStatus = C.CPX_STAT_CONFLICT_FEASIBLE
	CPX_STAT_CONFLICT_MINIMAL             SolutionStatus = C.CPX_STAT_CONFLICT_MINIMAL
	CPX_STAT_CONFLICT_ABORT_CONTRADICTION SolutionStatus = C.CPX_STAT_CONFLICT_ABORT_CONTRADICTION
	CPX_STAT_CONFLICT_ABORT_TIME_LIM      SolutionStatus = C.CPX_STAT_CONFLICT_ABORT_TIME_LIM
	CPX_STAT_CONFLICT_ABORT_IT_LIM        SolutionStatus = C.CPX_STAT_CONFLICT_ABORT_IT_LIM
	CPX_STAT_CONFLICT_ABORT_NODE_LIM      SolutionStatus = C.CPX_STAT_CONFLICT_ABORT_NODE_LIM
	CPX_STAT_CONFLICT_ABORT_OBJ_LIM       SolutionStatus = C.CPX_STAT_CONFLICT_ABORT_OBJ_LIM
	CPX_STAT_CONFLICT_ABORT_MEM_LIM       SolutionStatus = C.CPX_STAT_CONFLICT_ABORT_MEM_LIM
	CPX_STAT_CONFLICT_ABORT_USER          SolutionStatus = C.CPX_STAT_CONFLICT_ABORT_USER
	CPX_STAT_CONFLICT_ABORT_DETTIME_LIM   SolutionStatus = C.CPX_STAT_CONFLICT_ABORT_DETTIME_LIM
	CPXMIP_OPTIMAL                        SolutionStatus = C.CPXMIP_OPTIMAL
	CPXMIP_OPTIMAL_TOL                    SolutionStatus = C.CPXMIP_OPTIMAL_TOL
	CPXMIP_INFEASIBLE                     SolutionStatus = C.CPXMIP_INFEASIBLE
	CPXMIP_SOL_LIM                        SolutionStatus = C.CPXMIP_SOL_LIM
	CPXMIP_NODE_LIM_FEAS                  SolutionStatus = C.CPXMIP_NODE_LIM_FEAS
	CPXMIP_NODE_LIM_INFEAS                SolutionStatus = C.CPXMIP_NODE_LIM_INFEAS
	CPXMIP_TIME_LIM_FEAS                  SolutionStatus = C.CPXMIP_TIME_LIM_FEAS
	CPXMIP_TIME_LIM_INFEAS                SolutionStatus = C.CPXMIP_TIME_LIM_INFEAS
	CPXMIP_FAIL_FEAS                      SolutionStatus = C.CPXMIP_FAIL_FEAS
	CPXMIP_FAIL_INFEAS                    SolutionStatus = C.CPXMIP_FAIL_INFEAS
	CPXMIP_MEM_LIM_FEAS                   SolutionStatus = C.CPXMIP_MEM_LIM_FEAS
	CPXMIP_MEM_LIM_INFEAS                 SolutionStatus = C.CPXMIP_MEM_LIM_INFEAS
	CPXMIP_ABORT_FEAS                     SolutionStatus = C.CPXMIP_ABORT_FEAS
	CPXMIP_ABORT_INFEAS                   SolutionStatus = C.CPXMIP_ABORT_INFEAS
	CPXMIP_OPTIMAL_INFEAS                 SolutionStatus = C.CPXMIP_OPTIMAL_INFEAS
	CPXMIP_FAIL_FEAS_NO_TREE              SolutionStatus = C.CPXMIP_FAIL_FEAS_NO_TREE
	CPXMIP_FAIL_INFEAS_NO_TREE            SolutionStatus = C.CPXMIP_FAIL_INFEAS_NO_TREE
	CPXMIP_UNBOUNDED                      SolutionStatus = C.CPXMIP_UNBOUNDED
	CPXMIP_INForUNBD                      SolutionStatus = C.CPXMIP_INForUNBD
	CPXMIP_FEASIBLE_RELAXED_SUM           SolutionStatus = C.CPXMIP_FEASIBLE_RELAXED_SUM
	CPXMIP_OPTIMAL_RELAXED_SUM            SolutionStatus = C.CPXMIP_OPTIMAL_RELAXED_SUM
	CPXMIP_FEASIBLE_RELAXED_INF           SolutionStatus = C.CPXMIP_FEASIBLE_RELAXED_INF
	CPXMIP_OPTIMAL_RELAXED_INF            SolutionStatus = C.CPXMIP_OPTIMAL_RELAXED_INF
	CPXMIP_FEASIBLE_RELAXED_QUAD          SolutionStatus = C.CPXMIP_FEASIBLE_RELAXED_QUAD
	CPXMIP_OPTIMAL_RELAXED_QUAD           SolutionStatus = C.CPXMIP_OPTIMAL_RELAXED_QUAD
	CPXMIP_ABORT_RELAXED                  SolutionStatus = C.CPXMIP_ABORT_RELAXED
	CPXMIP_FEASIBLE                       SolutionStatus = C.CPXMIP_FEASIBLE
	CPXMIP_POPULATESOL_LIM                SolutionStatus = C.CPXMIP_POPULATESOL_LIM
	CPXMIP_OPTIMAL_POPULATED              SolutionStatus = C.CPXMIP_OPTIMAL_POPULATED
	CPXMIP_OPTIMAL_POPULATED_TOL          SolutionStatus = C.CPXMIP_OPTIMAL_POPULATED_TOL
	CPXMIP_DETTIME_LIM_FEAS               SolutionStatus = C.CPXMIP_DETTIME_LIM_FEAS
	CPXMIP_DETTIME_LIM_INFEAS             SolutionStatus = C.CPXMIP_DETTIME_LIM_INFEAS
)

func (r SolutionStatus) String() string {
	switch r {
	case CPX_STAT_OPTIMAL:
		return "CPX_STAT_OPTIMAL"
	case CPX_STAT_UNBOUNDED:
		return "CPX_STAT_UNBOUNDED"
	case CPX_STAT_INFEASIBLE:
		return "CPX_STAT_INFEASIBLE"
	case CPX_STAT_INForUNBD:
		return "CPX_STAT_INForUNBD"
	case CPX_STAT_OPTIMAL_INFEAS:
		return "CPX_STAT_OPTIMAL_INFEAS"
	case CPX_STAT_NUM_BEST:
		return "CPX_STAT_NUM_BEST"
	case CPX_STAT_ABORT_IT_LIM:
		return "CPX_STAT_ABORT_IT_LIM"
	case CPX_STAT_ABORT_TIME_LIM:
		return "CPX_STAT_ABORT_TIME_LIM"
	case CPX_STAT_ABORT_OBJ_LIM:
		return "CPX_STAT_ABORT_OBJ_LIM"
	case CPX_STAT_ABORT_USER:
		return "CPX_STAT_ABORT_USER"
	case CPX_STAT_FEASIBLE_RELAXED_SUM:
		return "CPX_STAT_FEASIBLE_RELAXED_SUM"
	case CPX_STAT_OPTIMAL_RELAXED_SUM:
		return "CPX_STAT_OPTIMAL_RELAXED_SUM"
	case CPX_STAT_FEASIBLE_RELAXED_INF:
		return "CPX_STAT_FEASIBLE_RELAXED_INF"
	case CPX_STAT_OPTIMAL_RELAXED_INF:
		return "CPX_STAT_OPTIMAL_RELAXED_INF"
	case CPX_STAT_FEASIBLE_RELAXED_QUAD:
		return "CPX_STAT_FEASIBLE_RELAXED_QUAD"
	case CPX_STAT_OPTIMAL_RELAXED_QUAD:
		return "CPX_STAT_OPTIMAL_RELAXED_QUAD"
	case CPX_STAT_OPTIMAL_FACE_UNBOUNDED:
		return "CPX_STAT_OPTIMAL_FACE_UNBOUNDED"
	case CPX_STAT_ABORT_PRIM_OBJ_LIM:
		return "CPX_STAT_ABORT_PRIM_OBJ_LIM"
	case CPX_STAT_ABORT_DUAL_OBJ_LIM:
		return "CPX_STAT_ABORT_DUAL_OBJ_LIM"
	case CPX_STAT_FEASIBLE:
		return "CPX_STAT_FEASIBLE"
	case CPX_STAT_FIRSTORDER:
		return "CPX_STAT_FIRSTORDER"
	case CPX_STAT_ABORT_DETTIME_LIM:
		return "CPX_STAT_ABORT_DETTIME_LIM"
	case CPX_STAT_CONFLICT_FEASIBLE:
		return "CPX_STAT_CONFLICT_FEASIBLE"
	case CPX_STAT_CONFLICT_MINIMAL:
		return "CPX_STAT_CONFLICT_MINIMAL"
	case CPX_STAT_CONFLICT_ABORT_CONTRADICTION:
		return "CPX_STAT_CONFLICT_ABORT_CONTRADICTION"
	case CPX_STAT_CONFLICT_ABORT_TIME_LIM:
		return "CPX_STAT_CONFLICT_ABORT_TIME_LIM"
	case CPX_STAT_CONFLICT_ABORT_IT_LIM:
		return "CPX_STAT_CONFLICT_ABORT_IT_LIM"
	case CPX_STAT_CONFLICT_ABORT_NODE_LIM:
		return "CPX_STAT_CONFLICT_ABORT_NODE_LIM"
	case CPX_STAT_CONFLICT_ABORT_OBJ_LIM:
		return "CPX_STAT_CONFLICT_ABORT_OBJ_LIM"
	case CPX_STAT_CONFLICT_ABORT_MEM_LIM:
		return "CPX_STAT_CONFLICT_ABORT_MEM_LIM"
	case CPX_STAT_CONFLICT_ABORT_USER:
		return "CPX_STAT_CONFLICT_ABORT_USER"
	case CPX_STAT_CONFLICT_ABORT_DETTIME_LIM:
		return "CPX_STAT_CONFLICT_ABORT_DETTIME_LIM"
	case CPXMIP_OPTIMAL:
		return "CPXMIP_OPTIMAL"
	case CPXMIP_OPTIMAL_TOL:
		return "CPXMIP_OPTIMAL_TOL"
	case CPXMIP_INFEASIBLE:
		return "CPXMIP_INFEASIBLE"
	case CPXMIP_SOL_LIM:
		return "CPXMIP_SOL_LIM"
	case CPXMIP_NODE_LIM_FEAS:
		return "CPXMIP_NODE_LIM_FEAS"
	case CPXMIP_NODE_LIM_INFEAS:
		return "CPXMIP_NODE_LIM_INFEAS"
	case CPXMIP_TIME_LIM_FEAS:
		return "CPXMIP_TIME_LIM_FEAS"
	case CPXMIP_TIME_LIM_INFEAS:
		return "CPXMIP_TIME_LIM_INFEAS"
	case CPXMIP_FAIL_FEAS:
		return "CPXMIP_FAIL_FEAS"
	case CPXMIP_FAIL_INFEAS:
		return "CPXMIP_FAIL_INFEAS"
	case CPXMIP_MEM_LIM_FEAS:
		return "CPXMIP_MEM_LIM_FEAS"
	case CPXMIP_MEM_LIM_INFEAS:
		return "CPXMIP_MEM_LIM_INFEAS"
	case CPXMIP_ABORT_FEAS:
		return "CPXMIP_ABORT_FEAS"
	case CPXMIP_ABORT_INFEAS:
		return "CPXMIP_ABORT_INFEAS"
	case CPXMIP_OPTIMAL_INFEAS:
		return "CPXMIP_OPTIMAL_INFEAS"
	case CPXMIP_FAIL_FEAS_NO_TREE:
		return "CPXMIP_FAIL_FEAS_NO_TREE"
	case CPXMIP_FAIL_INFEAS_NO_TREE:
		return "CPXMIP_FAIL_INFEAS_NO_TREE"
	case CPXMIP_UNBOUNDED:
		return "CPXMIP_UNBOUNDED"
	case CPXMIP_INForUNBD:
		return "CPXMIP_INForUNBD"
	case CPXMIP_FEASIBLE_RELAXED_SUM:
		return "CPXMIP_FEASIBLE_RELAXED_SUM"
	case CPXMIP_OPTIMAL_RELAXED_SUM:
		return "CPXMIP_OPTIMAL_RELAXED_SUM"
	case CPXMIP_FEASIBLE_RELAXED_INF:
		return "CPXMIP_FEASIBLE_RELAXED_INF"
	case CPXMIP_OPTIMAL_RELAXED_INF:
		return "CPXMIP_OPTIMAL_RELAXED_INF"
	case CPXMIP_FEASIBLE_RELAXED_QUAD:
		return "CPXMIP_FEASIBLE_RELAXED_QUAD"
	case CPXMIP_OPTIMAL_RELAXED_QUAD:
		return "CPXMIP_OPTIMAL_RELAXED_QUAD"
	case CPXMIP_ABORT_RELAXED:
		return "CPXMIP_ABORT_RELAXED"
	case CPXMIP_FEASIBLE:
		return "CPXMIP_FEASIBLE"
	case CPXMIP_POPULATESOL_LIM:
		return "CPXMIP_POPULATESOL_LIM"
	case CPXMIP_OPTIMAL_POPULATED:
		return "CPXMIP_OPTIMAL_POPULATED"
	case CPXMIP_OPTIMAL_POPULATED_TOL:
		return "CPXMIP_OPTIMAL_POPULATED_TOL"
	case CPXMIP_DETTIME_LIM_FEAS:
		return "CPXMIP_DETTIME_LIM_FEAS"
	case CPXMIP_DETTIME_LIM_INFEAS:
		return "CPXMIP_DETTIME_LIM_INFEAS"
	default:
		return "Unknown"
	}
}

type Solution struct {
	envPtr         C.CPXENVptr
	Status         SolutionStatus
	ObjectiveValue float64
	X              []float64
	Pi             []float64
	Slack          []float64
	Dj             []float64
}

/* Get a human-readable string to represent the solution status */
func (s *Solution) StatusString() string {
	cStatus := make([]C.char, C.CPXMESSAGEBUFSIZE)
	C.CPXgetstatstring(s.envPtr, C.int(s.Status), &cStatus[0])
	return C.GoString(&cStatus[0])
}
